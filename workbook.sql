conn chinook/p4ssw0rd

SELECT * FROM Employee;

SELECT * From Employee WHERE UPPER(LastName) = 'KING';

SELECT * FROM Employee WHERE (UPPER(FirstName) = 'ANDREW') AND ReportsTo IS NULL;

SELECT * FROM Album ORDER BY Title DESC;

SELECT FirstName From Customer ORDER BY City ASC;

INSERT INTO Genre VALUES (26, 'Rock');--already added
INSERT INTO Genre VALUES (27, 'Metal');--already added

INSERT INTO Employee 
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO) 
VALUES (9, 'Doe', 'John', 'IT Staff', 6);--already inserted
INSERT INTO Employee 
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO) 
VALUES (10, 'Bond', 'James', 'Agent', NULL);

INSERT INTO Customer (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(60, 'John', 'Smith', 'fake@notarealsite.com');--already inserted
INSERT INTO Customer (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(61, 'NULL', 'NULL', 'burneremail33@mail.com');--already inserted

UPDATE Customer                                                   --Already updated
SET FIRSTNAME = 'Robert', LASTNAME = 'WALTER'
WHERE UPPER(FIRSTNAME) = 'AARON' AND UPPER(LASTNAME) = 'MITCHELL';

UPDATE Artist                                                      --Already updated
Set Name = 'CCR'
WHERE Name = 'Creedence Clearwater Revival';

SELECT * FROM INVOICE WHERE BillingAddress Like 'T%';

SELECT * FROM INVOICE WHERE Total BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';

DELETE robert walter AND dependencies --commented because they are already deleted

DELETE FROM INVOICELINE
WHERE INVOICEID IN (
SELECT INVOICEID FROM INVOICE WHERE CustomerID = 
(SELECT CustomerID FROM Customer WHERE UPPER(FirstName)='ROBERT' AND UPPER(LastName)='WALTER'));

DELETE FROM Invoice WHERE CustomerID = 
(SELECT CustomerID FROM Customer WHERE UPPER(FirstName)='ROBERT' AND UPPER(LastName)='WALTER');

DELETE FROM Customer WHERE UPPER(FirstName)='ROBERT' AND UPPER(LastName)='WALTER';


--this function is a waste of time, the only sensible way to implement it is to call another function and return its return value, better to just use CURRENT_TIMESTAMP
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN TIMESTAMP AS CURR_TIME TIMESTAMP;
BEGIN
    SELECT CURRENT_TIMESTAMP INTO CURR_TIME FROM DUAL;
    RETURN CURR_TIME;
END;
/

SELECT LENGTH(NAME) AS MEDIATYPELENGTH FROM MEDIATYPE;

CREATE OR REPLACE FUNCTION GET_AVERAGE_TOTAL
RETURN NUMBER IS AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE FROM Invoice;
    RETURN AVERAGE;
END;
/

CREATE OR REPLACE FUNCTION GET_MOST_EXPENSIVE_TRACK
RETURN NUMBER IS MOST_EXPENSIVE NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO MOST_EXPENSIVE FROM TRACK;
    RETURN MOST_EXPENSIVE;
END;
/

CREATE OR REPLACE FUNCTION GET_AVERAGE_INVOICELINE
RETURN NUMBER IS AVERAGE NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVERAGE FROM INVOICELINE;
    RETURN AVERAGE;
END;
/

CREATE OR REPLACE FUNCTION GET_YOUNG_EMPLOYEES
RETURN SYS_REFCURSOR AS MY_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN MY_CURSOR FOR
    SELECT * FROM EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-31';
    RETURN MY_CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_NAMES;
BEGIN
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_ADDRESS
( T_EMPLOYEEID IN NUMBER, NEW_ADDRESS IN VARCHAR2, NEW_CITY IN VARCHAR2, NEW_STATE IN VARCHAR2, NEW_PostalCode IN VARCHAR2 ) AS
BEGIN
    UPDATE EMPLOYEE SET ADDRESS = NEW_ADDRESS,
    CITY = NEW_CITY,
    STATE = NEW_STATE,
    POSTALCODE = NEW_POSTALCODE
    WHERE EMPLOYEEID = T_EMPLOYEEID;
END;
/

CREATE OR REPLACE PROCEDURE GET_MANAGER
( T_EMPLOYEE_ID IN NUMBER, S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME AS MANAGER FROM EMPLOYEE 
    INNER JOIN 
    (SELECT REPORTSTO AS T_MANAGER FROM EMPLOYEE WHERE EMPLOYEEID = T_EMPLOYEE_ID)
    ON T_MANAGER = EMPLOYEEID;
END;
/

CREATE OR REPLACE PROCEDURE GET_NAME_AND_COMPANY
(T_CUSTOMERID IN NUMBER, FIRSTNAM OUT VARCHAR2, LASTNAM OUT VARCHAR2, COMPAN OUT VARCHAR2) AS
BEGIN
    SELECT FIRSTNAME INTO FIRSTNAM FROM CUSTOMER WHERE CUSTOMERID = T_CUSTOMERID;
    SELECT LASTNAME INTO LASTNAM FROM CUSTOMER WHERE CUSTOMERID = T_CUSTOMERID;
    SELECT COMPANY INTO COMPAN FROM CUSTOMER WHERE CUSTOMERID = T_CUSTOMERID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(T_INVOICE_ID IN NUMBER) AS
BEGIN
    DELETE INVOICELINE WHERE INVOICEID = T_INVOICE_ID;
    DELETE INVOICE WHERE INVOICEID = T_INVOICE_ID;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE NEW_CUSTOMER
( T_CUSTOMERID IN NUMBER, T_FIRSTNAME IN VARCHAR2, T_LASTNAME IN VARCHAR2, T_EMAIL IN VARCHAR2 ) AS
BEGIN
    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (T_CUSTOMERID, T_FIRSTNAME, T_LASTNAME, T_EMAIL);
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER TR_AFTER_INSERT_EMP
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('Employee Inserted');
END;
/

CREATE OR REPLACE TRIGGER TR_AFTER_INSERT_ALBUM
AFTER INSERT ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('Album Inserted');
END;
/

CREATE OR REPLACE TRIGGER TR_AFTER_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Customer Deleted');
END;
/

SELECT FIRSTNAME, LASTNAME, INVOICEID FROM
CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, Total FROM
CUSTOMER LEFT JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT ARTIST.NAME, ALBUM.TITLE FROM
ARTIST RIGHT JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

SELECT * FROM
ARTIST CROSS JOIN ALBUM
WHERE ARTIST.ARTISTID = ALBUM.ALBUMID
ORDER BY ARTIST.NAME ASC;

SELECT A.FIRSTNAME AS EMPLOYEE1, B.FIRSTNAME AS EMPLOYEE2 
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO<>B.REPORTSTO;


SELECT * FROM
ARTIST INNER JOIN
    ALBUM INNER JOIN
        EMPLOYEE INNER JOIN
            CUSTOMER INNER JOIN
                GENRE INNER JOIN
                    INVOICE INNER JOIN
                        MEDIATYPE INNER JOIN
                            INVOICELINE INNER JOIN
                                PLAYLIST INNER JOIN
                                    TRACK INNER JOIN PLAYLISTTRACK
                                    ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
                                ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
                            ON INVOICELINE.TRACKID = TRACK.TRACKID
                        ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
                    ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
                ON GENRE.GENREID = TRACK.GENREID
            ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
        ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID
    ON ALBUM.ALBUMID = TRACK.ALBUMID
ON ARTIST.ARTISTID = ALBUM.ARTISTID
;